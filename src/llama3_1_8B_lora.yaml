output_dir:
model_path:
dataset_path:

# Model Arguments
model:
  _component_: torchtune.models.llama3_1.lora_llama3_1_8b
  lora_attn_modules: ["q_proj", "v_proj", "output_proj"]
  apply_lora_to_mlp: True
  apply_lora_to_output: False
  lora_rank: 32 # higher increases model capacity at cost of model size
  lora_alpha: 64 # usually alpha=2*rank
  lora_dropout: 0.0

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  path: ${model_path}/original/tokenizer.model
  max_seq_len: null

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: ${model_path}
  checkpoint_files:
    [
      model-00001-of-00004.safetensors,
      model-00002-of-00004.safetensors,
      model-00003-of-00004.safetensors,
      model-00004-of-00004.safetensors,
    ]
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: LLAMA3
resume_from_checkpoint: False
save_adapter_weights_only: True # Don't save the merged model

# Dataset and Sampler
dataset:
  _component_: torchtune.datasets.chat_dataset
  source: json
  conversation_column: messages
  conversation_style: openai
  data_files: ${dataset_path}
  split: train
  train_on_input: True  # also learn style of target Slack
  packed: False # True increases speed, but has fussy tokenization
seed: null
shuffle: True
batch_size: 64

# Optimizer and Scheduler
optimizer:
  _component_: torch.optim.AdamW
  fused: True
  weight_decay: 0.01
  lr: 3e-4
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 100

loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss

# Training
epochs: 10
max_steps_per_epoch:
gradient_accumulation_steps: 1 # Use to increase effective batch size
compile: False # torch.compile the model + loss, True increases speed + decreases memory, but compilation is slow

# Logging
metric_logger:
  # Replaced with WandBLogger if WANDB_PROJECT is set
  _component_: torchtune.training.metric_logging.DiskLogger
  log_dir: ${output_dir}/logs
log_every_n_steps: 10
log_peak_memory_stats: True

# Environment
device: cuda
dtype: bf16

# Activations Offloading
enable_activation_checkpointing: True # True reduces memory at cost of compute
enable_activation_offloading: False # True reduces memory at cost of latency to/from host

# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False

  #Output directory of trace artifacts
  output_dir: ${output_dir}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 5
  warmup_steps: 3
  active_steps: 2
  num_cycles: 1

# For colab use True
low_cpu_ram: False
